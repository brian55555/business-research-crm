// src/components/ContactsList.js
import React, { useState, useEffect } from 'react';
import { Card, Table, Button, Badge, Spinner, Form, InputGroup, Alert, Modal, Row, Col, Nav } from 'react-bootstrap';
import { FaSearch, FaPlus, FaEdit, FaTrash, FaPhoneAlt, FaEnvelope, FaLinkedin, FaTwitter, FaCalendarPlus, FaStar, FaRegStar } from 'react-icons/fa';
import { Link } from 'react-router-dom';
import api from '../utils/api';
import ContactForm from './ContactForm';
import InteractionForm from './InteractionForm';

const ContactsList = ({ businessId }) => {
  const [contacts, setContacts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterRelationship, setFilterRelationship] = useState('');
  const [showContactForm, setShowContactForm] = useState(false);
  const [currentContact, setCurrentContact] = useState(null);
  const [showInteractionForm, setShowInteractionForm] = useState(false);
  const [interactionContact, setInteractionContact] = useState(null);
  const [selectedContact, setSelectedContact] = useState(null);
  const [showContactDetail, setShowContactDetail] = useState(false);
  const [view, setView] = useState('table');
  
  useEffect(() => {
    loadContacts();
  }, [businessId]);
  
  const loadContacts = async () => {
    try {
      setLoading(true);
      const response = await api.get(businessId 
        ? `/contacts/business/${businessId}` 
        : '/contacts');
      
      setContacts(response.data);
      setLoading(false);
    } catch (err) {
      console.error('Failed to load contacts', err);
      setError('Failed to load contacts');
      setLoading(false);
    }
  };
  
  const handleContactSaved = () => {
    setShowContactForm(false);
    setCurrentContact(null);
    loadContacts();
  };
  
  const handleContactCancel = () => {
    setShowContactForm(false);
    setCurrentContact(null);
  };
  
  const editContact = (contact) => {
    setCurrentContact(contact);
    setShowContactForm(true);
  };
  
  const addInteraction = (contact) => {
    setInteractionContact(contact);
    setShowInteractionForm(true);
  };
  
  const handleInteractionSaved = () => {
    setShowInteractionForm(false);
    setInteractionContact(null);
    loadContacts();
  };
  
  const handleInteractionCancel = () => {
    setShowInteractionForm(false);
    setInteractionContact(null);
  };
  
  const showContact = (contact) => {
    setSelectedContact(contact);
    setShowContactDetail(true);
  };
  
  const handleDeleteContact = async (contactId) => {
    if (window.confirm('Are you sure you want to delete this contact?')) {
      try {
        await api.delete(`/contacts/${contactId}`);
        loadContacts();
      } catch (err) {
        console.error('Failed to delete contact', err);
        setError('Failed to delete contact');
      }
    }
  };
  
  const togglePrimaryContact = async (contact) => {
    try {
      await api.put(`/contacts/${contact._id}`, {
        ...contact,
        isPrimary: !contact.isPrimary
      });
      loadContacts();
    } catch (err) {
      console.error('Failed to update contact', err);
      setError('Failed to update contact');
    }
  };
  
  const getRelationshipBadgeColor = (strength) => {
    switch (strength) {
      case 'New': return 'secondary';
      case 'Connected': return 'info';
      case 'Engaged': return 'primary';
      case 'Strong': return 'success';
      case 'Advocate': return 'warning';
      default: return 'secondary';
    }
  };
  
  const getFormattedDate = (dateString) => {
    if (!dateString) return 'Never';
    
    const date = new Date(dateString);
    return date.toLocaleDateString();
  };
  
  // Filter contacts
  const filteredContacts = contacts.filter(contact => {
    // Search filter
    const fullName = `${contact.firstName} ${contact.lastName}`;
    const matchesSearch = 
      fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.position?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.company?.name?.toLowerCase().includes(searchTerm.toLowerCase());
    
    // Relationship filter
    const matchesRelationship = !filterRelationship || contact.relationshipStrength === filterRelationship;
    
    return matchesSearch && matchesRelationship;
  });
  
  if (loading) {
    return (
      <div className="text-center p-5">
        <Spinner animation="border" />
        <p className="mt-2">Loading contacts...</p>
      </div>
    );
  }
  
  if (showContactForm) {
    return (
      <ContactForm 
        businessId={businessId}
        contact={currentContact}
        onSaved={handleContactSaved}
        onCancel={handleContactCancel}
      />
    );
  }
  
  if (showInteractionForm) {
    return (
      <InteractionForm
        contact={interactionContact}
        onSaved={handleInteractionSaved}
        onCancel={handleInteractionCancel}
      />
    );
  }
  
  return (
    <Card className="shadow-sm">
      <Card.Header className="bg-white d-flex justify-content-between align-items-center">
        <h5 className="mb-0">Contacts</h5>
        <div className="d-flex">
          <div className="btn-group me-2">
            <Button 
              variant={view === 'table' ? 'primary' : 'outline-primary'} 
              size="sm"
              onClick={() => setView('table')}
            >
              Table
            </Button>
            <Button 
              variant={view === 'cards' ? 'primary' : 'outline-primary'} 
              size="sm"
              onClick={() => setView('cards')}
            >
              Cards
            </Button>
          </div>
          <Button 
            variant="primary" 
            size="sm"
            onClick={() => {
              setCurrentContact(null);
              setShowContactForm(true);
            }}
          >
            <FaPlus className="me-1" /> Add Contact
          </Button>
        </div>
      </Card.Header>
      <Card.Body>
        {error && <Alert variant="danger">{error}</Alert>}
        
        <div className="mb-3 d-flex flex-wrap">
          <div className="me-auto mb-2">
            <InputGroup>
              <InputGroup.Text>
                <FaSearch />
              </InputGroup.Text>
              <Form.Control
                type="text"
                placeholder="Search contacts..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
            </InputGroup>
          </div>
          <div className="ms-md-2 mb-2">
            <Form.Select
              value={filterRelationship}
              onChange={(e) => setFilterRelationship(e.target.value)}
            >
              <option value="">All Relationships</option>
              <option value="New">New</option>
              <option value="Connected">Connected</option>
              <option value="Engaged">Engaged</option>
              <option value="Strong">Strong</option>
              <option value="Advocate">Advocate</option>
            </Form.Select>
          </div>
        </div>
        
        {filteredContacts.length === 0 ? (
          <div className="text-center py-5">
            <p className="mb-3">No contacts found.</p>
            <Button 
              variant="outline-primary"
              onClick={() => {
                setCurrentContact(null);
                setShowContactForm(true);
              }}
            >
              <FaPlus className="me-2" /> Add your first contact
            </Button>
          </div>
        ) : view === 'table' ? (
          <div className="table-responsive">
            <Table hover className="align-middle">
              <thead>
                <tr>
                  <th></th>
                  <th>Name</th>
                  <th>Position</th>
                  {!businessId && <th>Company</th>}
                  <th>Contact Info</th>
                  <th>Relationship</th>
                  <th>Last Contacted</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredContacts.map((contact) => (
                  <tr key={contact._id}>
                    <td>
                      <Button
                        variant="link"
                        className="p-0"
                        onClick={() => togglePrimaryContact(contact)}
                        title={contact.isPrimary ? "Primary Contact" : "Make Primary Contact"}
                      >
                        {contact.isPrimary ? (
                          <FaStar className="text-warning" />
                        ) : (
                          <FaRegStar className="text-muted" />
                        )}
                      </Button>
                    </td>
                    <td>
                      <div style={{cursor: 'pointer'}} onClick={() => showContact(contact)}>
                        {contact.firstName} {contact.lastName}
                      </div>
                    </td>
                    <td>{contact.position}</td>
                    {!businessId && (
                      <td>
                        {contact.company ? (
                          <Link to={`/businesses/${contact.company._id}`}>
                            {contact.company.name}
                          </Link>
                        ) : (
                          <span className="text-muted">-</span>
                        )}
                      </td>
                    )}
                    <td>
                      <div className="d-flex">
                        {contact.email && (
                          <a href={`mailto:${contact.email}`} className="me-2" title={contact.email}>
                            <FaEnvelope />
                          </a>
                        )}
                        {contact.phone && (
                          <a href={`tel:${contact.phone}`} className="me-2" title={contact.phone}>
                            <FaPhoneAlt />
                          </a>
                        )}
                        {contact.linkedIn && (
                          <a href={contact.linkedIn} target="_blank" rel="noopener noreferrer" className="me-2" title="LinkedIn Profile">
                            <FaLinkedin />
                          </a>
                        )}
                        {contact.twitter && (
                          <a href={contact.twitter} target="_blank" rel="noopener noreferrer" title="Twitter Profile">
                            <FaTwitter />
                          </a>
                        )}
                      </div>
                    </td>
                    <td>
                      <Badge bg={getRelationshipBadgeColor(contact.relationshipStrength)}>
                        {contact.relationshipStrength}
                      </Badge>
                    </td>
                    <td>
                      {getFormattedDate(contact.lastContacted)}
                    </td>
                    <td>
                      <Button
                        variant="outline-primary"
                        size="sm"
                        className="me-1"
                        onClick={() => addInteraction(contact)}
                        title="Add Interaction"
                      >
                        <FaCalendarPlus />
                      </Button>
                      <Button
                        variant="outline-secondary"
                        size="sm"
                        className="me-1"
                        onClick={() => editContact(contact)}
                        title="Edit Contact"
                      >
                        <FaEdit />
                      </Button>
                      <Button
                        variant="outline-danger"
                        size="sm"
                        onClick={() => handleDeleteContact(contact._id)}
                        title="Delete Contact"
                      >
                        <FaTrash />
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </Table>
          </div>
        ) : (
          <Row>
            {filteredContacts.map((contact) => (
              <Col md={6} lg={4} xl={3} key={contact._id} className="mb-3">
                <Card className="h-100">
                  <Card.Header className="d-flex justify-content-between align-items-center bg-white">
                    <h6 className="mb-0">
                      {contact.isPrimary && <FaStar className="text-warning me-1" />}
                      {contact.firstName} {contact.lastName}
                    </h6>
                    <Badge bg={getRelationshipBadgeColor(contact.relationshipStrength)}>
                      {contact.relationshipStrength}
                    </Badge>
                  </Card.Header>
                  <Card.Body>
                    <p className="text-muted mb-2">{contact.position}</p>
                    {!businessId && contact.company && (
                      <p className="mb-2">
                        <strong>Company:</strong>{' '}
                        <Link to={`/businesses/${contact.company._id}`}>
                          {contact.company.name}
                        </Link>
                      </p>
                    )}
                    
                    {contact.email && (
                      <p className="mb-1">
                        <FaEnvelope className="me-2" />
                        <a href={`mailto:${contact.email}`}>{contact.email}</a>
                      </p>
                    )}
                    
                    {contact.phone && (
                      <p className="mb-1">
                        <FaPhoneAlt className="me-2" />
                        <a href={`tel:${contact.phone}`}>{contact.phone}</a>
                      </p>
                    )}
                    
                    <div className="mt-3 d-flex">
                      {contact.linkedIn && (
                        <a href={contact.linkedIn} target="_blank" rel="noopener noreferrer" className="me-3" title="LinkedIn Profile">
                          <FaLinkedin size={20} />
                        </a>
                      )}
                      {contact.twitter && (
                        <a href={contact.twitter} target="_blank" rel="noopener noreferrer" title="Twitter Profile">
                          <FaTwitter size={20} />
                        </a>
                      )}
                    </div>
                    
                    <div className="mt-3">
                      <small className="text-muted">
                        Last contacted: {getFormattedDate(contact.lastContacted)}
                      </small>
                    </div>
                  </Card.Body>
                  <Card.Footer className="bg-white d-flex justify-content-between">
                    <Button
                      variant="outline-primary"
                      size="sm"
                      onClick={() => addInteraction(contact)}
                    >
                      <FaCalendarPlus className="me-1" /> Interaction
                    </Button>
                    <div>
                      <Button
                        variant="outline-secondary"
                        size="sm"
                        className="me-1"
                        onClick={() => editContact(contact)}
                      >
                        <FaEdit />
                      </Button>
                      <Button
                        variant="outline-danger"
                        size="sm"
                        onClick={() => handleDeleteContact(contact._id)}
                      >
                        <FaTrash />
                      </Button>
                    </div>
                  </Card.Footer>
                </Card>
              </Col>
            ))}
          </Row>
        )}
      </Card.Body>
      
      {/* Contact Detail Modal */}
      <Modal
        show={showContactDetail}
        onHide={() => setShowContactDetail(false)}
        size="lg"
      >
        {selectedContact && (
          <>
            <Modal.Header closeButton>
              <Modal.Title>
                {selectedContact.isPrimary && <FaStar className="text-warning me-1" />}
                {selectedContact.firstName} {selectedContact.lastName}
              </Modal.Title>
            </Modal.Header>
            <Modal.Body>
              <Row>
                <Col md={6}>
                  <h5 className="mb-3">Contact Information</h5>
                  
                  <p>
                    <strong>Position:</strong> {selectedContact.position || 'N/A'}
                  </p>
                  
                  {selectedContact.department && (
                    <p>
                      <strong>Department:</strong> {selectedContact.department}
                    </p>
                  )}
                  
                  {!businessId && selectedContact.company && (
                    <p>
                      <strong>Company:</strong>{' '}
                      <Link to={`/businesses/${selectedContact.company._id}`}>
                        {selectedContact.company.name}
                      </Link>
                    </p>
                  )}
                  
                  <p>
                    <strong>Relationship:</strong>{' '}
                    <Badge bg={getRelationshipBadgeColor(selectedContact.relationshipStrength)}>
                      {selectedContact.relationshipStrength}
                    </Badge>
                  </p>
                  
                  <hr />
                  
                  <h6>Contact Details</h6>
                  
                  {selectedContact.email && (
                    <p>
                      <FaEnvelope className="me-2" />
                      <a href={`mailto:${selectedContact.email}`}>{selectedContact.email}</a>
                    </p>
                  )}
                  
                  {selectedContact.phone && (
                    <p>
                      <FaPhoneAlt className="me-2" />
                      <a href={`tel:${selectedContact.phone}`}>{selectedContact.phone}</a>
                    </p>
                  )}
                  
                  {selectedContact.mobile && (
                    <p>
                      <FaPhoneAlt className="me-2" />
                      <a href={`tel:${selectedContact.mobile}`}>{selectedContact.mobile}</a> (Mobile)
                    </p>
                  )}
                  
                  <div className="mt-3">
                    {selectedContact.linkedIn && (
                      <a href={selectedContact.linkedIn} target="_blank" rel="noopener noreferrer" className="me-3" title="LinkedIn Profile">
                        <FaLinkedin size={24} />
                      </a>
                    )}
                    {selectedContact.twitter && (
                      <a href={selectedContact.twitter} target="_blank" rel="noopener noreferrer" title="Twitter Profile">
                        <FaTwitter size={24} />
                      </a>
                    )}
                  </div>
                  
                  {selectedContact.notes && (
                    <>
                      <hr />
                      <h6>Notes</h6>
                      <p>{selectedContact.notes}</p>
                    </>
                  )}
                  
                  {selectedContact.tags && selectedContact.tags.length > 0 && (
                    <>
                      <hr />
                      <h6>Tags</h6>
                      <div>
                        {selectedContact.tags.map((tag, index) => (
                          <Badge bg="secondary" key={index} className="me-1 mb-1">{tag}</Badge>
                        ))}
                      </div>
                    </>
                  )}
                </Col>
                <Col md={6}>
                  <h5 className="mb-3">Interaction History</h5>
                  
                  <div className="mb-3">
                    <Button
                      variant="outline-primary"
                      size="sm"
                      onClick={() => {
                        setShowContactDetail(false);
                        addInteraction(selectedContact);
                      }}
                    >
                      <FaCalendarPlus className="me-1" /> Add Interaction
                    </Button>
                  </div>
                  
                  {selectedContact.interactions && selectedContact.interactions.length > 0 ? (
                    <div className="timeline">
                      {selectedContact.interactions
                        .sort((a, b) => new Date(b.date) - new Date(a.date))
                        .map((interaction, index) => (
                          <div key={interaction._id || index} className="timeline-item mb-3 pb-3 border-bottom">
                            <div className="d-flex justify-content-between">
                              <Badge bg={
                                interaction.type === 'Email' ? 'info' :
                                interaction.type === 'Call' ? 'success' :
                                interaction.type === 'Meeting' ? 'primary' :
                                interaction.type === 'Social' ? 'warning' : 'secondary'
                              }>
                                {interaction.type}
                              </Badge>
                              <small>{new Date(interaction.date).toLocaleString()}</small>
                            </div>
                            {interaction.notes && (
                              <p className="mt-2 mb-1">{interaction.notes}</p>
                            )}
                            {interaction.outcome && (
                              <p className="mb-0">
                                <strong>Outcome:</strong> {interaction.outcome}
                              </p>
                            )}
                          </div>
                        ))}
                    </div>
                  ) : (
                    <p className="text-muted">No interactions recorded yet.</p>
                  )}
                </Col>
              </Row>
            </Modal.Body>
            <Modal.Footer>
              <Button
                variant="outline-secondary"
                onClick={() => setShowContactDetail(false)}
              >
                Close
              </Button>
              <Button
                variant="primary"
                onClick={() => {
                  setShowContactDetail(false);
                  editContact(selectedContact);
                }}
              >
                <FaEdit className="me-1" /> Edit Contact
              </Button>
            </Modal.Footer>
          </>
        )}
      </Modal>
    </Card>
  );
};

export default ContactsList;

// src/components/ContactForm.js
import React, { useState, useEffect } from 'react';
import { Card, Form, Button, Alert, Row, Col, Spinner } from 'react-bootstrap';
import { FaSave, FaTimes } from 'react-icons/fa';
import api from '../utils/api';

const ContactForm = ({ businessId, contact, onSaved, onCancel }) => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    position: '',
    department: '',
    company: '',
    email: '',
    phone: '',
    mobile: '',
    linkedIn: '',
    twitter: '',
    notes: '',
    tags: '',
    relationshipStrength: 'New',
    isPrimary: false
  });
  
  const [businesses, setBusinesses] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [loadingBusinesses, setLoadingBusinesses] = useState(false);
  
  useEffect(() => {
    // If editing an existing contact
    if (contact) {
      setFormData({
        ...contact,
        company: contact.company._id || contact.company,
        tags: contact.tags ? contact.tags.join(', ') : ''
      });
    } else if (businessId) {
      // If creating a new contact for a specific business
      setFormData({
        ...formData,
        company: businessId
      });
    }
    
    // Load businesses if not provided a businessId
    if (!businessId) {
      loadBusinesses();
    }
  }, [contact, businessId]);
  
  const loadBusinesses = async () => {
    try {
      setLoadingBusinesses(true);
      const response = await api.get('/businesses');
      setBusinesses(response.data);
      setLoadingBusinesses(false);
    } catch (err) {
      console.error('Failed to load businesses', err);
      setError('Failed to load businesses');
      setLoadingBusinesses(false);
    }
  };
  
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    if (!formData.firstName || !formData.lastName) {
      setError('First and last name are required');
      return;
    }
    
    if (!formData.company) {
      setError('Company is required');
      return;
    }
    
    try {
      setLoading(true);
      
      // Prepare data for API
      const contactData = {
        ...formData,
        tags: formData.tags ? formData.tags.split(',').map(tag => tag.trim()) : []
      };
      
      let response;
      if (contact) {
        // Update existing contact
        response = await api.put(`/contacts/${contact._id}`, contactData);
      } else {
        // Create new contact
        response = await api.post('/contacts', contactData);
      }
      
      setLoading(false);
      onSaved(response.data);
    } catch (err) {
      console.error('Failed to save contact', err);
      setError(err.response?.data?.message || 'Failed to save contact');
      setLoading(false);
    }
  };
  
  return (
    <Card className="shadow-sm">
      <Card.Header className="bg-white">
        <h4 className="mb-0">
          {contact ? 'Edit Contact' : 'Add New Contact'}
        </h4>
      </Card.Header>
      <Card.Body>
        {error && <Alert variant="danger">{error}</Alert>}
        
        <Form onSubmit={handleSubmit}>
          <Row>
            <Col md={6}>
              <h5 className="mb-3">Contact Information</h5>
              
              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>First Name*</Form.Label>
                    <Form.Control
                      type="text"
                      name="firstName"
                      value={formData.firstName}
                      onChange={handleChange}
                      required
                    />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>Last Name*</Form.Label>
                    <Form.Control
                      type="text"
                      name="lastName"
                      value={formData.lastName}
                      onChange={handleChange}
                      required
                    />
                  </Form.Group>
                </Col>
              </Row>
              
              <Form.Group className="mb-3">
                <Form.Label>Position</Form.Label>
                <Form.Control
                  type="text"
                  name="position"
                  value={formData.position}
                  onChange={handleChange}
                />
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Label>Department</Form.Label>
                <Form.Control
                  type="text"
                  name="department"
                  value={formData.department}
                  onChange={handleChange}
                />
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Label>Company*</Form.Label>
                {businessId ? (
                  <Form.Control
                    type="text"
                    value={businesses.find(b => b._id === businessId)?.name || 'Current Business'}
                    disabled
                  />
                ) : (
                  <Form.Select
                    name="company"
                    value={formData.company}
                    onChange={handleChange}
                    required
                    disabled={loadingBusinesses}
                  >
                    <option value="">Select a company</option>
                    {businesses.map(business => (
                      <option key={business._id} value={business._id}>
                        {business.name}
                      </option>
                    ))}
                  </Form.Select>
                )}
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Check
                  type="checkbox"
                  name="isPrimary"
                  label="Primary Contact"
                  checked={formData.isPrimary}
                  onChange={handleChange}
                />
              </Form.Group>
            </Col>
            
            <Col md={6}>
              <h5 className="mb-3">Contact Details</h5>
              
              <Form.Group className="mb-3">
                <Form.Label>Email</Form.Label>
                <Form.Control
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleChange}
                />
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Label>Phone</Form.Label>
                <Form.Control
                  type="text"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                />
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Label>Mobile</Form.Label>
                <Form.Control
                  type="text"
                  name="mobile"
                  value={formData.mobile}
                  onChange={handleChange}
                />
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Label>LinkedIn URL</Form.Label>
                <Form.Control
                  type="url"
                  name="linkedIn"
                  value={formData.linkedIn}
                  onChange={handleChange}
                  placeholder="https://linkedin.com/in/username"
                />
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Label>Twitter URL</Form.Label>
                <Form.Control
                  type="url"
                  name="twitter"
                  value={formData.twitter}
                  onChange={handleChange}
                  placeholder="https://twitter.com/username"
                />
              </Form.Group>
            </Col>
          </Row>
          
          <Row className="mt-3">
            <Col md={12}>
              <h5 className="mb-3">Additional Information</h5>
              
              <Form.Group className="mb-3">
                <Form.Label>Relationship Strength</Form.Label>
                <Form.Select
                  name="relationshipStrength"
                  value={formData.relationshipStrength}
                  onChange={handleChange}
                >
                  <option value="New">New</option>
                  <option value="Connected">Connected</option>
                  <option value="Engaged">Engaged</option>
                  <option value="Strong">Strong</option>
                  <option value="Advocate">Advocate</option>
                </Form.Select>
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Label>Notes</Form.Label>
                <Form.Control
                  as="textarea"
                  rows={3}
                  name="notes"
                  value={formData.notes}
                  onChange={handleChange}
                />
              </Form.Group>
              
              <Form.Group className="mb-3">
                <Form.Label>Tags (comma-separated)</Form.Label>
                <Form.Control
                  type="text"
                  name="tags"
                  value={formData.tags}
                  onChange={handleChange}
                  placeholder="e.g. decision-maker, technical, finance"
                />
              </Form.Group>
            </Col>
          </Row>
          
          <div className="d-flex justify-content-end mt-4">
            <Button
              variant="secondary"
              onClick={onCancel}
              className="me-2"
              disabled={loading}
            >
              <FaTimes className="me-1" /> Cancel
            </Button>
            <Button
              variant="primary"
              type="submit"
              disabled={loading}
            >
              {loading ? (
                <>
                  <Spinner
                    as="span"
                    animation="border"
                    size="sm"
                    role="status"
                    aria-hidden="true"
                    className="me-2"
                  />
                  Saving...
                </>
              ) : (
                <>
                  <FaSave className="me-1" /> Save Contact
                </>
              )}
            </Button>
          </div>
        </Form>
      </Card.Body>
    </Card>
  );
};

export default ContactForm;

// src/components/InteractionForm.js
import React, { useState } from 'react';
import { Card, Form, Button, Alert, Row, Col, Spinner } from 'react-bootstrap';
import { FaSave, FaTimes, FaUserCircle } from 'react-icons/fa';
import api from '../utils/api';

const InteractionForm = ({ contact, onSaved, onCancel }) => {
  const [formData, setFormData] = useState({
    type: 'Email',
    date: new Date().toISOString().split('T')[0],
    notes: '',
    outcome: ''
  });
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({
      ...formData,
      [name]: value
    });
  };
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    
    if (!formData.type) {
      setError('Interaction type is required');
      return;
    }
    
    try {
      setLoading(true);
      
      const response = await api.post(`/contacts/${contact._id}/interactions`, formData);
      
      setLoading(false);
      onSaved(response.data);
    } catch (err) {
      console.error('Failed to save interaction', err);
      setError(err.response?.data?.message || 'Failed to save interaction');
      setLoading(false);
    }
  };
  
  return (
    <Card className="shadow-sm">
      <Card.Header className="bg-white">
        <h4 className="mb-0">Record Interaction</h4>
      </Card.Header>
      <Card.Body>
        {error && <Alert variant="danger">{error}</Alert>}
        
        <div className="mb-4">
          <div className="d-flex align-items-center">
            <FaUserCircle size={24} className="me-2 text-primary" />
            <h5 className="mb-0">
              {contact.firstName} {contact.lastName}
            </h5>
          </div>
          {contact.position && (
            <p className="text-muted mt-1 mb-0">{contact.position}</p>
          )}
        </div>
        
        <Form onSubmit={handleSubmit}>
          <Row>
            <Col md={6}>
              <Form.Group className="mb-3">
                <Form.Label>Interaction Type*</Form.Label>
                <Form.Select
                  name="type"
                  value={formData.type}
                  onChange={handleChange}
                  required
                >
                  <option value="Email">Email</option>
                  <option value="Call">Call</option>
                  <option value="Meeting">Meeting</option>
                  <option value="Social">Social</option>
                  <option value="Other">Other</option>
                </Form.Select>
              </Form.Group>
            </Col>
            <Col md={6}>
              <Form.Group className="mb-3">
                <Form.Label>Date*</Form.Label>
                <Form.Control
                  type="date"
                  name="date"
                  value={formData.date}
                  onChange={handleChange}
                  required
                />
              </Form.Group>
            </Col>
          </Row>
          
          <Form.Group className="mb-3">
            <Form.Label>Notes</Form.Label>
            <Form.Control
              as="textarea"
              rows={3}
              name="notes"
              value={formData.notes}
              onChange={handleChange}
              placeholder="What was discussed?"
            />
          </Form.Group>
          
          <Form.Group className="mb-3">
            <Form.Label>Outcome</Form.Label>
            <Form.Control
              as="textarea"
              rows={2}
              name="outcome"
              value={formData.outcome}
              onChange={handleChange}
              placeholder="What was the result of this interaction?"
            />
          </Form.Group>
          
          <div className="d-flex justify-content-end mt-4">
            <Button
              variant="secondary"
              onClick={onCancel}
              className="me-2"
              disabled={loading}
            >
              <FaTimes className="me-1" /> Cancel
            </Button>
            <Button
              variant="primary"
              type="submit"
              disabled={loading}
            >
              {loading ? (
                <>
                  <Spinner
                    as="span"
                    animation="border"
                    size="sm"
                    role="status"
                    aria-hidden="true"
                    className="me-2"
                  />
                  Saving...
                </>
              ) : (
                <>
                  <FaSave className="me-1" /> Save Interaction
                </>
              )}
            </Button>
          </div>
        </Form>
      </Card.Body>
    </Card>
  );
};

export default InteractionForm;